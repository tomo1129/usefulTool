<%= render 'shared/header' %>
<div class="main">
	<article>
		<section>
			<h1>Spring Boot でCMSを作ってみた</h1>
			<div class="sentence_section">
				<pre>最近SpringBootに関するナレッジ
<a href="http://ti-tomo-knowledge.net/knowledge?small_category=Spring%20Boot" target=“_blank”>http://ti-tomo-knowledge.net/knowledge?small_category=Spring%20Boot</a>
をいくつか上げてきたのですが、散らかってきた印象があるので最初から順序を追ってSpringBootサービス作りの手順を記していこうと思います！
何のサービス作りにしようか考えたのですが、ブログのようなCMS機能を実装すれば大方機能のことは理解できるのではないかと思うので、記事を編集する管理画面、ユーザが記事を閲覧できる画面について、実装手順を書いていこうと思います。

・バージョン情報は以下になります。
SpringBoot 1.4.3
MySQL 5.7.18
Redis 3.2.9
定義ファイルはapplication.ymlを使います。

※今回はSPA(Single Page Application)は使わずにThymeleafでテンプレート側は実装します。
  また、極力Javascriptを使用しない実装にしようと思います。

実装の目次としては以下になります。
</pre>
				<pre class="index">
					<ol class="outer" type="1">
						<li><a href="#1-basic-setup">基本セットアップ</a>
							<ol type="1">
								<li><a href="#1-hello">Hello World!の出力</a></li>
								<li><a href="#1-java-version">Javaのバージョンセット</a></li>
								<li><a href="#1-develop-effective">開発効率を上げるための設定</a></li>
								<li><a href="#1-set-database">データベースの設定</a></li>
								<li><a href="#1-migration">マイグレーションの実行</a></li></ol></li>
					</ol>
				</pre>
				<h3 id="1-basic-setup" class="bold outer-title">1. 基本セットアップ</h3>
				<h4 id="1-hello" class="bold">1. Hello World!の出力</h4>
				<pre>
「Hello World!」の出力は新しくプロジェクトを作る上で一番基本的なことですね。
<a href="http://ti-tomo-knowledge.net/knowledge/40" target="_blank">http://ti-tomo-knowledge.net/knowledge/40</a>
にIntellijを使ったやり方ではありますが、「Hello World!」を出力するまでの流れを記していますので、参考にしてください。
このリンク先のバージョンが今回のバージョンとは違いますが、流れは変わりありませんので、同じ流れで実行してください。
Eclipseなど、他のIDEを使用している方はごめんなさい。でも、「Hello World!」を出力するまでの流れはネットで調べればいくらでも出てきます。
そういう経緯でもここは細かい説明を省略させていただきます。
				</pre>
				<h4 id="1-java-version" class="bold">2. Javaのバージョンセット</h4>
				<pre>
「Hello World!」で動作確認もできたところで次は開発前にやる色々な設定のうちの1つ、Javaのバージョン指定です。
<a href="http://ti-tomo-knowledge.net/knowledge/79" target="_blank">http://ti-tomo-knowledge.net/knowledge/79</a>
に細かく設定方法を記しましたので、設定してみてください。
				</pre>
				<h4 id="1-develop-effective" class="bold">3. 開発効率を上げるための設定</h4>
				<pre>
次は開発効率を上げるために、Spring Boot Devtoolsというものをインストールします。
Spring Bootではソースを変更するたびにコンパイルが必要になりますが、
Spring Boot Devtoolsを導入すると勝手にコンパイルが始まるので、
多少は効率を上げることができます。コンパイル忘れも無くなりますね。
<a href="http://ti-tomo-knowledge.net/knowledge/80" target="_blank">http://ti-tomo-knowledge.net/knowledge/80</a>
にやり方を記しました。
				</pre>
				<h4 id="1-set-database" class="bold">4. データベースの設定</h4>
				<pre>
CMSを作るためには当然データベースに情報を保存していかなければいけません。
今回はSpring Data JPAと呼ばれるSpring Bootからデータベースを扱うライブラリをインストールします。
同じようにデータベースを扱う主要なライブラリとしてSpring JDBCなどもありますが、今回は割愛します。
設定手順は以下に記しましたのでご確認ください。
<a href="http://ti-tomo-knowledge.net/knowledge/46" target="_blank">http://ti-tomo-knowledge.net/knowledge/46</a>
				</pre>
				<h4 id="1-migration" class="bold">5. マイグレーションの実行</h4>
				<pre>
データベースのバージョン管理についてはFlywayを使ったマイグレーションで行います。
以下にやり方を記しますが、
<a href="http://ti-tomo-knowledge.net/knowledge/47" target="_blank">http://ti-tomo-knowledge.net/knowledge/47</a>
今回はusersテーブル内に権限に関するカラムも入れておきたいため、
以下のマイグレーションテーブルを追加してアプリケーションを実行させてみてください。

V2__add-authority.sql<div class="sentence_section spring_code">
					<pre><code class="sql">alter table users add is_admin tinyint(1) not null default '0' after password;</code></pre>
				</div>

				</pre>
			</div>
		</section>
		<!--最新ニュース(About Latest News)とか-->
		<!--特集とか-->
		<!--便利ツールとか-->
		<!--閲覧ランキング-->
		<% if Rails.env == 'production' %>
			<section>
				<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
				<!-- adsense -->
				<ins class="adsbygoogle"
					 style="display:block"
					 data-ad-client="ca-pub-7732606557161974"
					 data-ad-slot="1848440441"
					 data-ad-format="auto"></ins>
				<script>
					(adsbygoogle = window.adsbygoogle || []).push({});
				</script>
			</section>
		<% end %>
	</article>
	<script>
		$(function(){
			// #で始まるアンカーをクリックした場合に処理
			$('a[href^="#"]').click(function() {
				// スクロールの速度
				var speed = 400; // ミリ秒
				// アンカーの値取得
				var href= $(this).attr("href");
				// 移動先を取得
				var target = $(href == "#" || href == "" ? 'html' : href);
				// 移動先を数値で取得
				var position = target.offset().top;
				// スムーススクロール
				$('body,html').animate({scrollTop:position}, speed, 'swing');
				return false;
			});
		});
	</script>
	<%= render 'shared/sidebar' %>
</div>
<%= render 'shared/footer' %>